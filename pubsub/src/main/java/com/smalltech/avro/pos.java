/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.smalltech.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class pos extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5782335492079197479L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"pos\",\"namespace\":\"com.smalltech.avro\",\"fields\":[{\"name\":\"timeofsale\",\"type\":\"string\"},{\"name\":\"merchant\",\"type\":\"string\"},{\"name\":\"productid\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<pos> ENCODER =
      new BinaryMessageEncoder<pos>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<pos> DECODER =
      new BinaryMessageDecoder<pos>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<pos> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<pos> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<pos> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<pos>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this pos to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a pos from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a pos instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static pos fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence timeofsale;
   private java.lang.CharSequence merchant;
   private java.lang.CharSequence productid;
   private java.lang.CharSequence sellingPrice;
   private java.lang.CharSequence quantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public pos() {}

  /**
   * All-args constructor.
   * @param timeofsale The new value for timeofsale
   * @param merchant The new value for merchant
   * @param productid The new value for productid
   * @param sellingPrice The new value for sellingPrice
   * @param quantity The new value for quantity
   */
  public pos(java.lang.CharSequence timeofsale, java.lang.CharSequence merchant, java.lang.CharSequence productid, java.lang.CharSequence sellingPrice, java.lang.CharSequence quantity) {
    this.timeofsale = timeofsale;
    this.merchant = merchant;
    this.productid = productid;
    this.sellingPrice = sellingPrice;
    this.quantity = quantity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timeofsale;
    case 1: return merchant;
    case 2: return productid;
    case 3: return sellingPrice;
    case 4: return quantity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timeofsale = (java.lang.CharSequence)value$; break;
    case 1: merchant = (java.lang.CharSequence)value$; break;
    case 2: productid = (java.lang.CharSequence)value$; break;
    case 3: sellingPrice = (java.lang.CharSequence)value$; break;
    case 4: quantity = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timeofsale' field.
   * @return The value of the 'timeofsale' field.
   */
  public java.lang.CharSequence getTimeofsale() {
    return timeofsale;
  }


  /**
   * Sets the value of the 'timeofsale' field.
   * @param value the value to set.
   */
  public void setTimeofsale(java.lang.CharSequence value) {
    this.timeofsale = value;
  }

  /**
   * Gets the value of the 'merchant' field.
   * @return The value of the 'merchant' field.
   */
  public java.lang.CharSequence getMerchant() {
    return merchant;
  }


  /**
   * Sets the value of the 'merchant' field.
   * @param value the value to set.
   */
  public void setMerchant(java.lang.CharSequence value) {
    this.merchant = value;
  }

  /**
   * Gets the value of the 'productid' field.
   * @return The value of the 'productid' field.
   */
  public java.lang.CharSequence getProductid() {
    return productid;
  }


  /**
   * Sets the value of the 'productid' field.
   * @param value the value to set.
   */
  public void setProductid(java.lang.CharSequence value) {
    this.productid = value;
  }

  /**
   * Gets the value of the 'sellingPrice' field.
   * @return The value of the 'sellingPrice' field.
   */
  public java.lang.CharSequence getSellingPrice() {
    return sellingPrice;
  }


  /**
   * Sets the value of the 'sellingPrice' field.
   * @param value the value to set.
   */
  public void setSellingPrice(java.lang.CharSequence value) {
    this.sellingPrice = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.CharSequence getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.CharSequence value) {
    this.quantity = value;
  }

  /**
   * Creates a new pos RecordBuilder.
   * @return A new pos RecordBuilder
   */
  public static com.smalltech.avro.pos.Builder newBuilder() {
    return new com.smalltech.avro.pos.Builder();
  }

  /**
   * Creates a new pos RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new pos RecordBuilder
   */
  public static com.smalltech.avro.pos.Builder newBuilder(com.smalltech.avro.pos.Builder other) {
    if (other == null) {
      return new com.smalltech.avro.pos.Builder();
    } else {
      return new com.smalltech.avro.pos.Builder(other);
    }
  }

  /**
   * Creates a new pos RecordBuilder by copying an existing pos instance.
   * @param other The existing instance to copy.
   * @return A new pos RecordBuilder
   */
  public static com.smalltech.avro.pos.Builder newBuilder(com.smalltech.avro.pos other) {
    if (other == null) {
      return new com.smalltech.avro.pos.Builder();
    } else {
      return new com.smalltech.avro.pos.Builder(other);
    }
  }

  /**
   * RecordBuilder for pos instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<pos>
    implements org.apache.avro.data.RecordBuilder<pos> {

    private java.lang.CharSequence timeofsale;
    private java.lang.CharSequence merchant;
    private java.lang.CharSequence productid;
    private java.lang.CharSequence sellingPrice;
    private java.lang.CharSequence quantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.smalltech.avro.pos.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timeofsale)) {
        this.timeofsale = data().deepCopy(fields()[0].schema(), other.timeofsale);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.merchant)) {
        this.merchant = data().deepCopy(fields()[1].schema(), other.merchant);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productid)) {
        this.productid = data().deepCopy(fields()[2].schema(), other.productid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sellingPrice)) {
        this.sellingPrice = data().deepCopy(fields()[3].schema(), other.sellingPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing pos instance
     * @param other The existing instance to copy.
     */
    private Builder(com.smalltech.avro.pos other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timeofsale)) {
        this.timeofsale = data().deepCopy(fields()[0].schema(), other.timeofsale);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.merchant)) {
        this.merchant = data().deepCopy(fields()[1].schema(), other.merchant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productid)) {
        this.productid = data().deepCopy(fields()[2].schema(), other.productid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sellingPrice)) {
        this.sellingPrice = data().deepCopy(fields()[3].schema(), other.sellingPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'timeofsale' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimeofsale() {
      return timeofsale;
    }


    /**
      * Sets the value of the 'timeofsale' field.
      * @param value The value of 'timeofsale'.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder setTimeofsale(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.timeofsale = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timeofsale' field has been set.
      * @return True if the 'timeofsale' field has been set, false otherwise.
      */
    public boolean hasTimeofsale() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timeofsale' field.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder clearTimeofsale() {
      timeofsale = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchant' field.
      * @return The value.
      */
    public java.lang.CharSequence getMerchant() {
      return merchant;
    }


    /**
      * Sets the value of the 'merchant' field.
      * @param value The value of 'merchant'.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder setMerchant(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.merchant = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'merchant' field has been set.
      * @return True if the 'merchant' field has been set, false otherwise.
      */
    public boolean hasMerchant() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'merchant' field.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder clearMerchant() {
      merchant = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productid' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductid() {
      return productid;
    }


    /**
      * Sets the value of the 'productid' field.
      * @param value The value of 'productid'.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder setProductid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.productid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productid' field has been set.
      * @return True if the 'productid' field has been set, false otherwise.
      */
    public boolean hasProductid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productid' field.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder clearProductid() {
      productid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellingPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getSellingPrice() {
      return sellingPrice;
    }


    /**
      * Sets the value of the 'sellingPrice' field.
      * @param value The value of 'sellingPrice'.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder setSellingPrice(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.sellingPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sellingPrice' field has been set.
      * @return True if the 'sellingPrice' field has been set, false otherwise.
      */
    public boolean hasSellingPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sellingPrice' field.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder clearSellingPrice() {
      sellingPrice = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder setQuantity(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.quantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.smalltech.avro.pos.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public pos build() {
      try {
        pos record = new pos();
        record.timeofsale = fieldSetFlags()[0] ? this.timeofsale : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.merchant = fieldSetFlags()[1] ? this.merchant : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.productid = fieldSetFlags()[2] ? this.productid : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sellingPrice = fieldSetFlags()[3] ? this.sellingPrice : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.quantity = fieldSetFlags()[4] ? this.quantity : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<pos>
    WRITER$ = (org.apache.avro.io.DatumWriter<pos>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<pos>
    READER$ = (org.apache.avro.io.DatumReader<pos>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.timeofsale);

    out.writeString(this.merchant);

    out.writeString(this.productid);

    out.writeString(this.sellingPrice);

    out.writeString(this.quantity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timeofsale = in.readString(this.timeofsale instanceof Utf8 ? (Utf8)this.timeofsale : null);

      this.merchant = in.readString(this.merchant instanceof Utf8 ? (Utf8)this.merchant : null);

      this.productid = in.readString(this.productid instanceof Utf8 ? (Utf8)this.productid : null);

      this.sellingPrice = in.readString(this.sellingPrice instanceof Utf8 ? (Utf8)this.sellingPrice : null);

      this.quantity = in.readString(this.quantity instanceof Utf8 ? (Utf8)this.quantity : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timeofsale = in.readString(this.timeofsale instanceof Utf8 ? (Utf8)this.timeofsale : null);
          break;

        case 1:
          this.merchant = in.readString(this.merchant instanceof Utf8 ? (Utf8)this.merchant : null);
          break;

        case 2:
          this.productid = in.readString(this.productid instanceof Utf8 ? (Utf8)this.productid : null);
          break;

        case 3:
          this.sellingPrice = in.readString(this.sellingPrice instanceof Utf8 ? (Utf8)this.sellingPrice : null);
          break;

        case 4:
          this.quantity = in.readString(this.quantity instanceof Utf8 ? (Utf8)this.quantity : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










